{"/home/travis/build/npmtest/node-npmtest-pug-lint/test.js":"/* istanbul instrument in package npmtest_pug_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-lint/lib.npmtest_pug_lint.js":"/* istanbul instrument in package npmtest_pug_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pug_lint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pug_lint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-lint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pug-lint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pug_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pug_lint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pug_lint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pug_lint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pug_lint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pug_lint.__dirname + '/lib.npmtest_pug_lint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/linter.js":"var assert = require('assert');\nvar fs = require('fs');\nvar path = require('path');\nvar glob = require('glob');\nvar isAbsolutePath = require('path-is-absolute');\nvar minimatch = require('minimatch');\nvar resolve = require('resolve');\nvar ConfigFile = require('./config-file');\nvar Errors = require('./errors');\nvar File = require('./pug-file');\nvar utils = require('./utils');\n\nvar Linter = function () {\n  this._basePath = '.';\n  this._excludedFileMasks = ['node_modules/**'];\n  this._excludedFileMatchers = [];\n  this._fileExtensions = ['.pug', '.jade'];\n};\n\nLinter.prototype = {\n  checkDirectory: function (directoryPath) {\n    var errors = [];\n\n    if (this._isFileExcluded(directoryPath)) {\n      return [];\n    }\n\n    fs.readdirSync(directoryPath).forEach(function (file) {\n      var filePath = directoryPath + '/' + file;\n      var stat = fs.statSync(filePath);\n\n      if (stat.isDirectory()) {\n        errors = errors.concat(this.checkDirectory(filePath));\n      } else if (this._fileExtensions.indexOf(path.extname(filePath)) !== -1) {\n        errors = errors.concat(this.checkFile(filePath));\n      }\n    }, this);\n\n    return errors;\n  },\n\n  checkFile: function (filePath) {\n    /* istanbul ignore if */\n    if (this._isFileExcluded(filePath)) {\n      return [];\n    }\n\n    return this.checkString(fs.readFileSync(filePath, 'utf8'), filePath);\n  },\n\n  checkPath: function (filePath) {\n    filePath = filePath.replace(/\\/$/, '');\n\n    if (!fs.existsSync(filePath)) {\n      throw new Error('Path ' + filePath + ' was not found');\n    }\n\n    var stat = fs.statSync(filePath);\n\n    if (stat.isDirectory()) {\n      return this.checkDirectory(filePath);\n    }\n\n    return this.checkFile(filePath);\n  },\n\n  checkString: function (source, filename) {\n    filename = filename || 'input';\n\n    var file = this._createFile(filename, source);\n\n    return this._checkFile(file);\n  },\n\n  configure: function (options) {\n    this._configuredRules = [];\n    this._ruleMasks = [path.join(__dirname, 'rules/*.js')];\n\n    if (options) {\n      this._extendConfiguration(options);\n\n      if (options.hasOwnProperty('preset')) {\n        throw new Error('Presets have been deprecated. See: https://github.com/pugjs/pug-lint#preset-deprecated');\n      }\n\n      if (options.hasOwnProperty('excludeFiles')) {\n        assert(Array.isArray(options.excludeFiles), '\"excludeFiles\" option requires array value');\n\n        this._excludedFileMasks = options.excludeFiles;\n      }\n\n      if (options.hasOwnProperty('additionalRules')) {\n        assert(Array.isArray(options.additionalRules), '\"additionalRules\" option requires array value');\n\n        this._ruleMasks = this._ruleMasks.concat(options.additionalRules);\n      }\n\n      this._loadExcludedFiles();\n\n      this._ruleMasks.forEach(function (mask) {\n        glob.sync(mask).forEach(function (file) {\n          var Rule = require(path.resolve(file));\n          var rule = new Rule();\n          var name = rule.name;\n\n          if (options.hasOwnProperty(name) && options[name] !== null) {\n            if (rule.contradictions) {\n              rule.contradictions.forEach(function (contradiction) {\n                if (options.hasOwnProperty(contradiction) && options[contradiction] !== null) {\n                  options[contradiction] = null;\n                }\n              });\n            }\n\n            rule.configure(options[name]);\n\n            this._configuredRules.push(rule);\n          }\n        }, this);\n      }, this);\n    }\n  },\n\n  getConfiguredRules: function () {\n    return this._configuredRules;\n  },\n\n  _checkFile: function (file) {\n    var errors = new Errors(file);\n    var firstToken;\n\n    file.getParseErrors().forEach(function (parseError) {\n      errors.addParseError(parseError);\n    });\n\n    firstToken = file.getFirstToken();\n\n    if (!firstToken || firstToken && firstToken.type === 'eos') {\n      return errors.getErrors();\n    }\n\n    this.getConfiguredRules().forEach(function (rule) {\n      errors.setCurrentRule(rule.name);\n\n      rule.lint(file, errors);\n    });\n\n    return errors.getErrors();\n  },\n\n  _createFile: function (filename, source) {\n    return new File(filename, source);\n  },\n\n  _extendConfiguration: function (options) {\n    if (options.hasOwnProperty('extends')) {\n      var configPath = this._resolveExtendsFile(options.extends);\n      var configOptions = ConfigFile.loadFromFile(configPath);\n\n      Object.keys(configOptions).forEach(function (key) {\n        if (!options.hasOwnProperty(key)) {\n          options[key] = configOptions[key];\n        }\n      });\n    }\n\n    return options;\n  },\n\n  _isFileExcluded: function (filePath) {\n    filePath = path.resolve(filePath);\n\n    return this._excludedFileMatchers.some(function (matcher) {\n      return matcher.match(filePath);\n    });\n  },\n\n  _loadExcludedFiles: function () {\n    this._excludedFileMatchers = this._excludedFileMasks.map(function (fileMask) {\n      return new minimatch.Minimatch(path.resolve(this._basePath, fileMask), {\n        dot: true\n      });\n    }, this);\n  },\n\n  _resolveExtendsFile: function (filePath) {\n    if (isAbsolutePath(filePath) || !/\\w|@/.test(filePath.charAt(0))) {\n      filePath = path.resolve(this._basePath, filePath);\n\n      if (!fs.existsSync(filePath)) {\n        throw new Error('Cannot find configuration file \"' + filePath + '\" to extend');\n      }\n    } else {\n      var packageName = utils.normalizePackageName(filePath, 'pug-lint-config');\n\n      try {\n        filePath = resolve.sync(packageName);\n      } catch (err) {\n        throw new Error('Cannot find module \"' + packageName + '\" to extend');\n      }\n    }\n\n    return filePath;\n  }\n};\n\nmodule.exports = Linter;\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/config-file.js":"var fs = require('fs');\nvar path = require('path');\nvar glob = require('glob');\nvar stripJSONComments = require('strip-json-comments');\n\nvar configs = [\n  '.pug-lintrc',\n  '.pug-lintrc.js',\n  '.pug-lintrc.json',\n  '.pug-lint.json',\n  '.jade-lintrc',\n  '.jade-lint.json',\n  'package.json'\n];\n\nexports.getContent = function (config, directory) {\n  if (!config) {\n    return;\n  }\n\n  var configPath = path.resolve(directory, config);\n  var content = this.loadFromFile(configPath);\n\n  config = path.basename(config);\n\n  return content && config === 'package.json' ? content.pugLintConfig || content.jadeLintConfig : content;\n};\n\nexports.getReporter = function (reporter) {\n  var writerPath;\n  var writer;\n\n  if (reporter) {\n    reporter = reporter.toString();\n    writerPath = path.resolve(process.cwd(), reporter);\n\n    if (!fs.existsSync(writerPath)) {\n      writerPath = path.resolve(__dirname, './reporters/' + reporter);\n    }\n  }\n\n  try {\n    writer = require(writerPath);\n  } catch (e) {\n    writer = null;\n  }\n\n  if (!writer) {\n    try {\n      writer = require(reporter);\n    } catch (e) {}\n  }\n\n  return {path: writerPath, writer: writer};\n};\n\nexports.load = function (config, cwd) {\n  var content;\n  var directory = cwd || process.cwd();\n\n  if (config) {\n    return this.getContent(config, directory);\n  }\n\n  content = this.getContent(\n    findup(configs, {nocase: true, cwd: directory}, function (configPath) {\n      if (path.basename(configPath) === 'package.json') {\n        return Boolean(this.getContent(configPath));\n      }\n\n      return true;\n    }.bind(this))\n  );\n\n  if (content) {\n    return content;\n  }\n\n  return this.loadFromHomeDirectory();\n};\n\nexports.loadFromFile = function (configPath) {\n  var content;\n  var ext;\n\n  if (fs.existsSync(configPath)) {\n    ext = path.extname(configPath);\n\n    if (ext === '.js') {\n      content = require(configPath);\n    } else {\n      content = JSON.parse(stripJSONComments(fs.readFileSync(configPath, 'utf8')));\n    }\n\n    content.configPath = configPath;\n  }\n\n  return content;\n};\n\nexports.loadFromHomeDirectory = function () {\n  var content;\n  var directoryArr = [process.env.USERPROFILE, process.env.HOMEPATH, process.env.HOME];\n  var i;\n  var dirLen;\n  var j;\n  var len;\n\n  for (i = 0, dirLen = directoryArr.length; i < dirLen; i++) {\n    /* istanbul ignore if */\n    if (!directoryArr[i]) {\n      continue;\n    }\n\n    for (j = 0, len = configs.length; j < len; j++) {\n      content = this.getContent(configs[j], directoryArr[i]);\n\n      /* istanbul ignore if */\n      if (content) {\n        return content;\n      }\n    }\n  }\n};\n\nfunction findup(patterns, options, fn) {\n  var lastpath;\n  var file;\n\n  options = Object.create(options);\n  options.maxDepth = 1;\n  options.cwd = path.resolve(options.cwd);\n\n  do {\n    file = patterns.filter(filterPatterns)[0];\n\n    if (file) {\n      return path.join(options.cwd, file);\n    }\n\n    lastpath = options.cwd;\n    options.cwd = path.resolve(options.cwd, '..');\n  } while (options.cwd !== lastpath);\n\n  function filterPatterns(pattern) {\n    var configPath = glob.sync(pattern, options)[0];\n\n    if (configPath) {\n      return fn(path.join(options.cwd, configPath));\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/errors.js":"var error = require('pug-error');\n\nvar Errors = function (file) {\n  this._errors = [];\n  this._file = file;\n  this._currentRule = '';\n};\n\nErrors.prototype = {\n  add: function (message, line, column) {\n    this._errors.push(error(this._currentRule, message, {\n      filename: this._file.getFilename(),\n      src: this._file.getSource().replace(/\\r\\n|\\r/g, '\\n'),\n      line: line,\n      column: column\n    }));\n  },\n\n  addParseError: function (error) {\n    this._errors.push(error);\n  },\n\n  getErrors: function () {\n    return this._errors;\n  },\n\n  setCurrentRule: function (rule) {\n    this._currentRule = 'LINT_' + rule.toUpperCase();\n  }\n};\n\nmodule.exports = Errors;\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/pug-file.js":"var acorn = require('acorn');\nvar acornWalk = require('acorn/dist/walk');\nvar findLineColumn = require('find-line-column');\nvar attrs = require('pug-attrs');\nvar lexer = require('pug-lexer');\nvar utils = require('./utils');\n\nvar PugFile = function (filename, source) {\n  this._parseErrors = [];\n  this._tokens = [];\n  this._filename = filename;\n  this._source = source;\n  this._lines = this._source.split(/\\r\\n|\\r|\\n/);\n  this._lineBreaks = this._source.match(/\\r\\n|\\r|\\n/g);\n\n  try {\n    var currentIndent = 0;\n    var indentSize = 0;\n\n    this._tokens = lexer(this._source, {filename: this._filename}).map(function (token, index) {\n      if (['indent', 'outdent'].indexOf(token.type) !== -1) {\n        if (token.val) {\n          if (indentSize === 0) {\n            indentSize = token.val;\n          }\n\n          currentIndent += indentSize;\n        } else {\n          currentIndent -= indentSize;\n        }\n      }\n\n      token._index = index;\n      token._indent = currentIndent;\n      return token;\n    });\n  } catch (e) {\n    this._parseErrors.push(e);\n  }\n};\n\nPugFile.prototype = {\n  addErrorForAllStaticAttributeValues: function (name, errors, message) {\n    this.iterateTokensByFilter(function (token) {\n      return token.type === 'attribute' && token.name.toLowerCase() === name.toLowerCase();\n    }, function (token) {\n      var options = {\n        terse: true,\n        format: 'html',\n        runtime: function (name) {\n          return name;\n        }\n      };\n      var compiled = attrs([token], options);\n\n      if (!/^attr\\(.*\\)$/g.exec(compiled)) {\n        errors.add(message, token.line, token.col);\n      }\n    });\n  },\n\n  addErrorForAllTokensByFilter: function (filter, errors, message) {\n    this.iterateTokensByFilter(filter, function (token) {\n      errors.add(message, token.line, token.col);\n    });\n  },\n\n  addErrorForAllTokensByType: function (type, errors, message) {\n    this.iterateTokensByType(type, function (token) {\n      errors.add(message, token.line, token.col);\n    });\n  },\n\n  addErrorForIncorrectSpacesAroundType: function (options, errors) {\n    options.filter = function (token) {\n      return token.type === options.type;\n    };\n\n    this.addErrorForIncorrectSpacesAroundFilter(options, errors);\n  },\n\n  addErrorForIncorrectSpacesAroundFilter: function (options, errors) {\n    var _this = this;\n\n    _this.iterateTokensByFilter(options.filter, function (token) {\n      var separator = ' ';\n      var match;\n      var columnIndex;\n      var columnNumber;\n      var errorMessage = [options.required ? 'One space required' : 'Illegal space'];\n      var tokenWidth = options.tokenWidth || 1;\n\n      switch (options.position) {\n        case 'before':\n          columnIndex = token.col - 1;\n          columnNumber = token.col;\n          errorMessage.push('before');\n          break;\n        default:\n          columnIndex = columnNumber = token.col + tokenWidth;\n          errorMessage.push('after');\n          break;\n      }\n\n      errorMessage.push(options.description);\n\n      match = _this.getCharacter(token.line, columnIndex);\n\n      _this.addErrorForMatch(match, separator, !options.required, errors\n          , errorMessage.join(' '), token.line, columnNumber);\n    });\n  },\n\n  addErrorForIncorrectTokenTypeOrder: function (typeA, typeB, boundaryTypes, errors, message) {\n    typeA = utils.createTypeArray(typeA);\n\n    var _this = this;\n\n    _this.iterateTokensByType(typeB, function (token) {\n      var current = token;\n      var currentIndex = current._index;\n      var start = _this.getPreviousTokenByType(token, boundaryTypes) || current;\n      var startIndex = start._index;\n      var end = _this.getNextTokenByType(token, boundaryTypes);\n      var endIndex = end._index;\n\n      _this.iterateTokensByFilter(function (token) {\n        return typeA.indexOf(token.type) !== -1 &&\n          token._index > currentIndex &&\n          token._index >= startIndex &&\n          token._index <= endIndex;\n      }, function (token) {\n        errors.add(message, token.line, token.col);\n      });\n    });\n  },\n\n  addErrorWithAcorn: function (token, cb, errors, message) {\n    var tokens = [];\n    var ast = acorn.parseExpressionAt(token.val, 0, {onToken: tokens});\n    var nodes = cb(ast, tokens);\n\n    nodes.forEach(function (node) {\n      var startLocation = this.findStartLocation(token.val, token, this.getNextToken(token));\n\n      /* istanbul ignore else: else branch is only a fallback */\n      if (startLocation) {\n        var loc = findLineColumn(token.val, node.start);\n\n        // loc.col is 0-based. Change it to 1-based.\n        loc.col++;\n        if (loc.line === 1) {\n          loc.col += startLocation.col - 1;\n        }\n\n        // loc.line is 1-based.\n        errors.add(message, startLocation.line + loc.line - 1, loc.col);\n      } else {\n        errors.add(message, token.line, token.col);\n      }\n    }.bind(this));\n  },\n\n  // `aggressive` reports *any* addition as error.\n  addErrorForConcatenation: function (token, errors, message, aggressive) {\n    this.addErrorWithAcorn(token, function (ast, tokens) {\n      var badPlus = [];\n\n      acornWalk.simple(ast, {\n        BinaryExpression: function (node) {\n          if (!badPlus.length && node.operator === '+' && (aggressive || isString(node.left) || isString(node.right))) {\n            badPlus.push(utils.getNextAcornToken(tokens, node.left.end));\n          }\n        }\n      });\n\n      return badPlus;\n\n      function isString(node) {\n        return node.type === 'Literal' && typeof node.value === 'string';\n      }\n    }, errors, message);\n  },\n\n  addErrorForTemplateString: function (token, errors, message, all) {\n    this.addErrorWithAcorn(token, function (ast) {\n      var templateLiterals = [];\n\n      if (all) {\n        acornWalk.simple(ast, {\n          TemplateLiteral: function (node) {\n            templateLiterals.push(node);\n          }\n        });\n      } else if (ast.type === 'TemplateLiteral') {\n        templateLiterals.push(ast);\n      }\n\n      return templateLiterals;\n    }, errors, message);\n  },\n\n  addErrorForMatch: function (a, b, isMatch, errors, message, lineNumber, columnNumber) {\n    if ((a === b) === isMatch) {\n      errors.add(message, lineNumber, columnNumber);\n    }\n  },\n\n  addErrorForCodeOperator: function (types, isRequired, errors) {\n    var codeOperators = utils.codeOperators;\n    var _this = this;\n\n    types.forEach(function (type) {\n      var codeOperator = codeOperators[type];\n\n      _this.addErrorForIncorrectSpacesAroundFilter({\n        filter: codeOperator.filter,\n        required: isRequired,\n        position: 'after',\n        description: codeOperator.description,\n        tokenWidth: type.length\n      }, errors);\n    });\n  },\n\n  findStartLocation: function (value, start, end) {\n    var lines = this.getLines(start.line, end && end.line);\n    lines[lines.length - 1] = lines[lines.length - 1].substring(0, end.col);\n    var source = lines.join('\\n');\n    var pos = source.indexOf(value, start.col - 1);\n\n    /* istanbul ignore if: this will only happen under odd circumstances like a\n     * lexer bug */\n    if (pos === -1) {\n      return null;\n    }\n\n    var loc = findLineColumn(source, pos);\n    return {\n      line: start.line + loc.line - 1,\n      col: loc.col + 1\n    };\n  },\n\n  getCharacter: function (line, column) {\n    return this.getLine(line).charAt(column - 1);\n  },\n\n  getFilename: function () {\n    return this._filename;\n  },\n\n  getFirstToken: function () {\n    return this.getToken(0);\n  },\n\n  getLastToken: function () {\n    var tokens = this.getTokens();\n\n    return tokens[tokens.length - 1];\n  },\n\n  getLine: function (line) {\n    return this.getLines(line, line)[0];\n  },\n\n  getLineBreaks: function () {\n    return this._lineBreaks;\n  },\n\n  getLines: function (start, end) {\n    start = isNaN(start) ? 0 : start - 1;\n    end = isNaN(end) ? this._lines.length : end;\n\n    return this._lines.slice(start, end);\n  },\n\n  getNextToken: function (current, direction) {\n    return this.getNextTokenByFilter(current, function () {\n      return true;\n    }, direction);\n  },\n\n  getNextTokenByFilter: function (current, filter, direction) {\n    direction = direction === undefined ? 'next' : direction;\n\n    var index = current._index;\n    var length = this.getTokens().length;\n\n    while (index >= 0 && index < length) {\n      index = direction === 'next' ? index + 1 : index - 1;\n      current = this.getToken(index);\n\n      if (current && filter(current)) {\n        return current;\n      }\n    }\n  },\n\n  getNextTokenByType: function (current, type, direction) {\n    type = utils.createTypeArray(type);\n\n    return this.getNextTokenByFilter(current, function (current) {\n      return type.indexOf(current.type) !== -1;\n    }, direction);\n  },\n\n  getParseErrors: function () {\n    return this._parseErrors;\n  },\n\n  getPreviousTokenByType: function (current, type) {\n    return this.getNextTokenByType(current, type, 'previous');\n  },\n\n  getSource: function () {\n    return this._source;\n  },\n\n  getSourceBetweenTokens: function (start, end) {\n    var currentLine = start.line;\n    var source = [];\n    var line;\n    var startIndex;\n    var endIndex;\n\n    while (currentLine <= end.line) {\n      line = this._lines[currentLine - 1];\n\n      if (currentLine === start.line) {\n        startIndex = start.col - 1;\n      } else {\n        startIndex = 0;\n      }\n\n      if (currentLine === end.line) {\n        endIndex = end.col - 1;\n      } else {\n        endIndex = line.length;\n      }\n\n      line = line.substring(startIndex, endIndex);\n\n      source.push(line);\n      currentLine++;\n    }\n\n    return source.join('\\n');\n  },\n\n  getToken: function (index) {\n    var tokens = this.getTokens();\n\n    return (tokens && tokens.length > index) ? tokens[index] : null;\n  },\n\n  getTokens: function () {\n    return this._tokens;\n  },\n\n  getTokensByFilter: function (filter) {\n    return this.getTokens().filter(filter);\n  },\n\n  iterateTokensByFilter: function (filter, cb) {\n    this.getTokensByFilter(filter).forEach(function (token) {\n      cb(token);\n    });\n  },\n\n  iterateTokensByType: function (type, cb) {\n    type = utils.createTypeArray(type);\n\n    this.iterateTokensByFilter(function (token) {\n      if (type.indexOf(token.type) !== -1) {\n        return true;\n      }\n\n      return false;\n    }, cb);\n  }\n};\n\nmodule.exports = PugFile;\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/utils.js":"var assert = require('assert');\nvar path = require('path');\n\nexports.createTypeArray = function (type) {\n  if (typeof type === 'string') {\n    type = [type];\n  }\n  return type;\n};\n\nexports.normalizePackageName = function (name, prefix) {\n  if (name.indexOf('\\\\') > -1) {\n    name = path.normalize(name).replace(/\\\\/g, '/');\n  }\n\n  if (name.indexOf(prefix + '-') !== 0) {\n    name = prefix + '-' + name;\n  }\n\n  return name;\n};\n\nexports.ownProperty = function (obj, propertyName) {\n  var properties = [];\n  var property;\n  var i;\n\n  for (i in obj) {\n    /* istanbul ignore else */\n    if (obj.hasOwnProperty(i)) {\n      properties.push(i);\n    }\n  }\n\n  while ((property = properties.pop())) {\n    if (property.toLowerCase() === propertyName.toLowerCase()) {\n      return obj[property];\n    }\n  }\n\n  return null;\n};\n\nexports.validateTrueOptions = function (name, options) {\n  assert(options === true, name + ' option requires a true value or should be removed');\n};\n\nexports.validateCodeOperatorOptions = function (name, options) {\n  assert(options === true || Array.isArray(options), name + ' option requires a true or array value or should be removed');\n\n  if (options === true) {\n    options = this.codeOperatorTypes;\n  }\n\n  return options;\n};\n\nexports.codeOperatorTypes = [\n  '-',\n  '=',\n  '!='\n];\n\nexports.codeOperators = {\n  '-': {\n    filter: function (token) {\n      return token.type === 'code' && !token.buffer && !token.mustEscape;\n    },\n    description: 'unbuffered code operator'\n  },\n  '=': {\n    filter: function (token) {\n      return token.type === 'code' && token.buffer && token.mustEscape;\n    },\n    description: 'buffered code operator'\n  },\n  '!=': {\n    filter: function (token) {\n      return token.type === 'code' && token.buffer && !token.mustEscape;\n    },\n    description: 'unescaped buffered code operator'\n  }\n};\n\nexports.htmlTagBoundaryTypes = [\n  ':',\n  'start-pug-interpolation',\n  'end-pug-interpolation',\n  'newline',\n  'indent',\n  'outdent',\n  'eos'\n];\n\nexports.concatenationRegex = /.['\"]\\s*(\\+)|(\\+)\\s*['\"]./;\n\nexports.getNextAcornToken = function (tokens, prevEnd) {\n  for (var i = 0; i < tokens.length; i++) {\n    if (tokens[i].start >= prevEnd) {\n      return tokens[i];\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/generators/rule.js":"var path = require('path');\nvar noCase = require('no-case');\nvar camelCase = require('camel-case');\nvar generators = require('yeoman-generator');\n\nmodule.exports = generators.Base.extend({\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n\n    this.destinationRoot(path.resolve(__dirname, '..'));\n    this.sourceRoot(path.join(__dirname, 'rule-templates'));\n  },\n\n  prompting: function () {\n    return this.prompt([\n      {\n        type: 'list',\n        name: 'verb',\n        message: 'The verb describing your rule',\n        choices: [\n          'disallow',\n          'require',\n          'validate'\n        ]\n      }, {\n        type: 'input',\n        name: 'thing',\n        message: function (answers) {\n          return {\n            disallow: 'What your rule disallows (e.g. string interpolation)',\n            require: 'What your rule requires (e.g. strict equality operators)',\n            validate: 'What your rule validates (e.g. attribute separators)'\n          }[answers.verb];\n        }\n      }, {\n        type: 'input',\n        name: 'negative',\n        message: 'What your rule tries to prevent (e.g. non-strict equality operators)',\n        when: function (answers) {\n          return answers.verb === 'require';\n        }\n      }, {\n        type: 'list',\n        name: 'options',\n        message: 'What option your rule supports',\n        choices: [\n          'true',\n          {\n            name: 'true or array of code separators (\"-\", \"=\", or \"!=\")',\n            value: 'true|codeSep',\n            short: 'true|Array<code sep>'\n          },\n          'other'\n        ]\n      }, {\n        type: 'input',\n        name: 'optionsExpanded',\n        message: 'The list of possible options (use JavaScript syntax, separated with a pipe \"|\"; e.g. true|\\'aggresive\\')',\n        when: function (answers) {\n          return answers.options === 'other';\n        }\n      }\n    ]).then(function (answers) {\n      var purpose = answers.verb + ' ' + answers.thing;\n      this.filename = noCase(purpose, null, '-');\n      this.optionName = camelCase(purpose);\n\n      this.requirement = {\n        disallow: 'not contain ',\n        require: 'use ',\n        validate: 'have valid '\n      }[answers.verb] + answers.thing;\n\n      this.thing = answers.thing;\n      this.negative = answers.negative || {\n        disallow: answers.thing,\n        validate: 'invalid ' + answers.thing\n      }[answers.verb];\n\n      this.optionsType = answers.options;\n      this.options = {\n        'true': ['true'],\n        'true|codeSep': ['true', 'code separator'],\n        'other': (answers.optionsExpanded || '').split('|')\n      }[answers.options];\n    }.bind(this));\n  },\n\n  writing: function () {\n    this.template('rule.js', 'lib/rules/' + this.filename + '.js');\n    this.template('test.js', 'test/rules/' + this.filename + '.test.js');\n    this.fs.write(path.resolve(this.destinationRoot(), 'test', 'fixtures', 'rules', this.filename + '.pug'), '//- ...');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/cli.js":"#!/usr/bin/env node\nvar program = require('commander');\nvar packageDetails = require('../package.json');\nvar configFile = require('./config-file');\nvar Linter = require('./linter');\n\nfunction run(args) {\n  program\n    .version(packageDetails.version)\n    .description(packageDetails.description)\n    .usage('[options] <file ...>')\n    .option('-c, --config <path>', 'configuration file path')\n    .option('-r, --reporter <reporter>', 'error reporter; console - default, inline', 'console')\n    .parse(args);\n\n  var config;\n  var reporter;\n  var linter = new Linter();\n  var errors = [];\n\n  if (!program.args.length) {\n    program.help();\n  }\n\n  config = configFile.load(program.config);\n  reporter = configFile.getReporter(program.reporter);\n\n  if (!reporter.writer) {\n    console.error('Reporter \"' + program.reporter + '\" does not exist');\n    process.exit(1);\n  }\n\n  linter.configure(config);\n\n  program.args.forEach(function (arg) {\n    errors = errors.concat(linter.checkPath(arg));\n  });\n\n  if (errors.length) {\n    reporter.writer(errors);\n    process.exit(2);\n  } else {\n    process.exit(0);\n  }\n}\n\nmodule.exports = run;\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/generators/rule-templates/rule.js":"// # <%- optionName %>: `true`\n//\n// The Pug template must <%- requirement %>.\n//\n// ```pug\n// //- Invalid\n// bleh...\n//\n// //- Valid\n// blah...\n// ```\n\n<% if (optionsType !== 'other') { -%>\nvar utils = require('../utils');\n<% } else { -%>\nvar assert = require('assert');\n<% } -%>\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: '<%- optionName %>',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n<% if (optionsType === 'true') { -%>\n    utils.validateTrueOptions(this.name, options);\n<% } else if (optionsType === 'true|codeSep'){ -%>\n    utils.validateCodeOperatorOptions(this.name, options);\n<% } else { -%>\n    // reminder: possible options: <%- options.join('|') %>\n    assert(..., this.name + ' option requires ...');\n<% } -%>\n  },\n\n  lint: function (file, errors) {\n    // ...\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/reporters/console.js":"module.exports = function (errors) {\n  if (errors.length) {\n    var messages = [];\n\n    errors.forEach(function (error) {\n      if (messages.length > 0) {\n        messages.push('');\n      }\n\n      messages.push(error.message);\n    });\n\n    console.error(messages.join('\\n'));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/reporters/inline.js":"module.exports = function (errors) {\n  if (errors.length) {\n    errors.forEach(function (error) {\n      var message = [\n        error.filename,\n        ':' + error.line,\n        error.column ? ':' + error.column : '',\n        ' ' + error.msg\n      ];\n\n      console.error(message.join(''));\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-attribute-concatenation.js":"// # disallowAttributeConcatenation: `true`\n//\n// Pug must not contain any attribute concatenation.\n//\n// ```pug\n// //- Invalid\n// a(href='text ' + title) Link\n// //- Invalid under `'aggressive'`\n// a(href=text + title) Link\n// a(href=num1 + num2) Link\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowAttributeConcatenation',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    assert(options === true || options === 'aggressive',\n        this.name + ' option requires either a true value or \"aggressive\". Otherwise it should be removed');\n    this._aggressive = options === 'aggressive';\n  },\n\n  lint: function (file, errors) {\n    var _this = this;\n\n    file.iterateTokensByType('attribute', function (token) {\n      file.addErrorForConcatenation(token, errors, 'Attribute concatenation must not be used', _this._aggressive);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-attribute-interpolation.js":"// # disallowAttributeInterpolation: `true`\n//\n// Pug must not contain any attribute interpolation operators.\n//\n// ```pug\n// //- Invalid\n// a(href='text #{title}') Link\n// //- Valid\n// a(href='text \\#{title}') Link\n// a(href='text \\\\#{title}') Link\n// ```\n//\n// ## Compatibility note\n//\n// Attribute interpolation has already been removed from Pug v2. This rule\n// helps transition from legacy \"Jade\" v1 code bases to Pug, but does not serve\n// any real purpose in real world if Pug v2 is used.\n\nvar findLineColumn = require('find-line-column');\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowAttributeInterpolation',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.iterateTokensByType('attribute', function (token) {\n      var result = /(\\\\)?#\\{.+\\}/.exec(token.val);\n      if (result && !result[1]) {\n        var startLocation = file.findStartLocation(token.val, token, file.getNextToken(token));\n        var loc = findLineColumn(token.val, result.index);\n\n        loc.col += loc.line === 1 ? startLocation.col : 1;\n        loc.line += startLocation.line - 1;\n        errors.add('Attribute interpolation operators must not be used', loc.line, loc.col);\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-attribute-template-string.js":"// # disallowAttributeTemplateString: `true` | `'all'`\n//\n// Pug must not contain template strings in attributes. `true` only fails when\n// the attribute is a template string; `'all'` fails when template strings are\n// used at all.\n//\n// ## e.g. `true`\n//\n// ```pug\n// //- Invalid\n// a(href=`https://${site}`) Link\n//\n// //- Valid\n// a(href=getLink(`https://${site}`)) Link\n// ```\n//\n// ## e.g. `'all'`\n//\n// ```pug\n// //- Invalid\n// a(href=getLink(`https://${site}`)) Link\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowAttributeTemplateString',\n\n  schema: {\n    enum: [null, true, 'all']\n  },\n\n  configure: function (options) {\n    assert(options === true || options === 'all',\n        this.name + ' option requires either a true value or \"all\". Otherwise it should be removed');\n    this._all = options === 'all';\n  },\n\n  lint: function (file, errors) {\n    file.iterateTokensByType('attribute', function (token) {\n      file.addErrorForTemplateString(token, errors, 'Attribute template string must not be used', this._all);\n    }.bind(this));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-block-expansion.js":"// # disallowBlockExpansion: `true`\n//\n// Pug must not contain any block expansion operators.\n//\n// ```pug\n// //- Invalid\n// p: strong text\n// table: tr: td text\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowBlockExpansion',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByType(':', errors, 'Block expansion operators must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-class-attribute-with-static-value.js":"// # disallowClassAttributeWithStaticValue: `true`\n//\n// Prefer class literals over `class` attributes with static values.\n//\n// ```pug\n// //- Invalid\n// span(class='foo')\n//\n// //- Valid\n// span.foo\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowClassAttributeWithStaticValue',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllStaticAttributeValues('class', errors, 'Static attribute \"class\" must be written as class literal');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-class-literals-before-attributes.js":"// # disallowClassLiteralsBeforeAttributes: `true`\n//\n// All attribute blocks must be written before any class literals.\n//\n// ```pug\n// //- Invalid\n// input.class(type='text')\n//\n// //- Valid\n// input(type='text').class\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowClassLiteralsBeforeAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['requireClassLiteralsBeforeAttributes'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('start-attributes', 'class', utils.htmlTagBoundaryTypes, errors, 'All class literals must be written after any attribute blocks');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-class-literals-before-id-literals.js":"// # disallowClassLiteralsBeforeIdLiterals: `true`\n//\n// All ID literals must be written before any class literals.\n//\n// ```pug\n// //- Invalid\n// input.class#id(type='text')\n//\n// //- Valid\n// input#id.class(type='text')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowClassLiteralsBeforeIdLiterals',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['requireClassLiteralsBeforeIdLiterals'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('id', 'class', utils.htmlTagBoundaryTypes, errors, 'All class literals must be written after any ID literals');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-class-literals.js":"// # disallowClassLiterals: `true`\n//\n// Pug must not contain any class literals.\n//\n// ```pug\n// //- Invalid\n// .class\n//\n// //- Valid\n// div(class='class')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowClassLiterals',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByType('class', errors, 'Class literals must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-duplicate-attributes.js":"// # disallowDuplicateAttributes: `true`\n//\n// Attribute blocks must not contain any duplicates.\n// And if an ID literal is present an ID attribute must not be used. Ignores class attributes.\n//\n// ```pug\n// //- Invalid\n// div(a='a' a='b')\n// #id(id='id')\n//\n// //- Valid\n// div(class='a', class='b')\n// .class(class='class')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowDuplicateAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.iterateTokensByType('start-attributes', function (token) {\n      var attributeNames = [];\n      var attributesStart = token;\n      var attributesStartIndex = attributesStart._index;\n      var attributesEnd = file.getNextTokenByType(token, 'end-attributes');\n      var attributesEndIndex = attributesEnd._index;\n      var attributesLineTokens = file.getTokensByFilter(function (token) {\n        return token.line === attributesStart.line;\n      });\n      var boundaryStart = file.getPreviousTokenByType(token, utils.htmlTagBoundaryTypes) || attributesLineTokens[0];\n      var boundaryStartIndex = boundaryStart._index;\n      var boundaryEnd = file.getNextTokenByType(token, utils.htmlTagBoundaryTypes);\n      var boundaryEndIndex = boundaryEnd._index;\n\n      file.iterateTokensByFilter(function (token) {\n        return token.type === 'attribute' &&\n          token._index > attributesStartIndex &&\n          token._index < attributesEndIndex;\n      }, function (token) {\n        var name = token.name.toLowerCase();\n\n        if (name !== 'class') {\n          if (attributeNames.indexOf(name) === -1) {\n            attributeNames.push(name);\n          } else {\n            errors.add('Duplicate attribute \"' + name + '\" is not allowed', token.line, token.col);\n          }\n        }\n      });\n\n      file.iterateTokensByFilter(function (token) {\n        return token.type === 'id' &&\n          token._index >= boundaryStartIndex &&\n          token._index <= boundaryEndIndex;\n      }, function (token) {\n        if (attributeNames.indexOf('id') !== -1) {\n          errors.add('Duplicate attribute \"id\" is not allowed', token.line, token.col);\n        }\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-html-text.js":"// # disallowHtmlText: `true`\n//\n// Pug must not contain any HTML text.\n//\n// ```pug\n// //- Invalid\n// <strong>html text</strong>\n// p this is <strong>html</strong> text\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowHtmlText',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByFilter(function (token) {\n      return token.type === 'text-html' || (token.type === 'text' && /<[^\\n]*/.test(token.val));\n    }, errors, 'HTML text must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-id-attribute-with-static-value.js":"// # disallowIdAttributeWithStaticValue: `true`\n//\n// Prefer ID literals over `id` attributes with static values.\n//\n// ```pug\n// //- Invalid\n// span(id='foo')\n//\n// //- Valid\n// span#id\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowIdAttributeWithStaticValue',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllStaticAttributeValues('id', errors, 'Static attribute \"id\" must be written as ID literal');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-id-literals-before-attributes.js":"// # disallowIdLiteralsBeforeAttributes: `true`\n//\n// All attribute blocks must be written before any ID literals.\n//\n// ```pug\n// //- Invalid\n// input#id(type='text')\n//\n// //- Valid\n// input(type='text')#id\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowIdLiteralsBeforeAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['requireIdLiteralsBeforeAttributes'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('start-attributes', 'id', utils.htmlTagBoundaryTypes, errors, 'All ID literals must be written after any attribute blocks');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-id-literals.js":"// # disallowIdLiterals: `true`\n//\n// Pug must not contain any ID literals.\n//\n// ```pug\n// //- Invalid\n// #id\n//\n// //- Valid\n// div(id='id')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowIdLiterals',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByType('id', errors, 'ID literals must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-legacy-mixin-call.js":"// # disallowLegacyMixinCall: `true`\n//\n// The Pug template must not contain legacy mixin call.\n//\n// ```pug\n// //- Invalid\n// mixin myMixin(arg)\n//\n// //- Valid mixin call\n// +myMixin(arg)\n//\n// //- Valid mixin call with block attached\n// +myMixin(arg)\n//   p Hey\n//\n// //- Valid mixin definition\n// mixin myMixin(arg)\n//   p Hey\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowLegacyMixinCall',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByFilter(function (token) {\n      return token.type === 'mixin' && file.getNextToken(token).type !== 'indent';\n    }, errors, 'Old mixin call syntax is not allowed');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-multiple-line-breaks.js":"// # disallowMultipleLineBreaks: `true`\n//\n// Pug must not contain multiple blank lines in a row.\n//\n// ```pug\n// //- Invalid\n// div\n//\n//\n// div\n//\n// //- Valid\n// div\n//\n// div\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowMultipleLineBreaks',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var blankLines = 0;\n\n    file.getLines().forEach(function (line, index) {\n      if (line.trim().length === 0) {\n        blankLines++;\n\n        if (blankLines > 1) {\n          errors.add('Must not have multiple blank lines in a row', index + 1);\n        }\n      } else {\n        blankLines = 0;\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-space-after-code-operator.js":"// # disallowSpaceAfterCodeOperator: `true` | `Array`\n//\n// ## e.g.: `true`\n//\n// No code operators (`-`/`=`/`!=`) should be followed by any spaces.\n//\n// ```pug\n// //- Invalid\n// p= 'This code is <escaped>'\n// p!=  'This code is <strong>not</strong> escaped'\n//\n// //- Valid\n// p='This code is <escaped>'\n// p!='This code is <strong>not</strong> escaped'\n// ```\n//\n// ## e.g.: `[ \"-\" ]`\n//\n// No unbuffered code operators (`-`) should be followed by any spaces.\n//\n// ```pug\n// //- Invalid\n// - var a = 'This is code'\n//\n// //- Valid\n// -var a = 'This is code'\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowSpaceAfterCodeOperator',\n\n  schema: {\n    anyOf: [\n      {\n        enum: [null, true]\n      },\n      {\n        type: 'array',\n        items: {\n          enum: ['-', '=', '!=']\n        }\n      }\n    ]\n  },\n\n  configure: function (options) {\n    this._codeOperatorTypes = utils.validateCodeOperatorOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForCodeOperator(this._codeOperatorTypes, false, errors);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-spaces-inside-attribute-brackets.js":"// # disallowSpacesInsideAttributeBrackets: `true`\n//\n// Disallows space after opening attribute bracket and before closing.\n//\n// ```pug\n// //- Invalid\n// input( type='text' name='name' value='value' )\n//\n// //- Valid\n// input(type='text' name='name' value='value')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowSpacesInsideAttributeBrackets',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['requireSpacesInsideAttributeBrackets'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectSpacesAroundType({\n      type: 'start-attributes',\n      required: false,\n      position: 'after',\n      description: 'opening bracket'\n    }, errors);\n\n    file.addErrorForIncorrectSpacesAroundType({\n      type: 'end-attributes',\n      required: false,\n      position: 'before',\n      description: 'closing bracket'\n    }, errors);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-specific-attributes.js":"// # disallowSpecificAttributes: `string` | `Array`\n//\n// ## e.g.: `\"a\"` OR `[ \"A\", \"b\" ]`\n//\n// Pug must not contain any of the attributes specified.\n//\n// ```pug\n// //- Invalid\n// span(a='a')\n// div(B='b')\n// ```\n//\n// ## e.g.: `[ { img: [ \"title\" ] } ]`\n//\n// `img` tags must not contain any of the attributes specified.\n//\n// ```pug\n// //- Invalid\n// img(title='title')\n// ```\n\nvar assert = require('assert');\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowSpecificAttributes',\n\n  schema: {\n    type: ['null', 'string', 'array'],\n    items: {\n      type: ['object', 'string'],\n      additionalProperties: {\n        type: ['string', 'array'],\n        items: {\n          type: 'string'\n        }\n      }\n    }\n  },\n\n  configure: function (options) {\n    assert(typeof options === 'string' || Array.isArray(options), this.name + ' option requires string or array value or should be removed');\n\n    this._disallowedAttributes = options;\n  },\n\n  lint: function (file, errors) {\n    addErrorForDisallowedAttribute(this._disallowedAttributes);\n\n    function addErrorForDisallowedAttribute(values, lineNumber, tag) {\n      if (typeof values === 'string') {\n        values = [values];\n      }\n\n      values.forEach(function (value) {\n        if (typeof value === 'object') {\n          file.iterateTokensByFilter(function (token) {\n            return token.type === 'tag' && utils.ownProperty(value, token.val) !== null;\n          }, function (token) {\n            addErrorForDisallowedAttribute(utils.ownProperty(value, token.val), token.line, token.val);\n          });\n        } else {\n          file.iterateTokensByFilter(function (token) {\n            return token.type === 'attribute' && (token.line === lineNumber || lineNumber === undefined);\n          }, function (token) {\n            var name = token.name;\n            var errorMessage;\n\n            if (name.toLowerCase() === value.toLowerCase()) {\n              errorMessage = tag ? 'Tag \"' + tag + '\" must not have attribute \"' + name + '\"' : 'Attribute \"' + name + '\" must not be used';\n\n              errors.add(errorMessage, token.line, token.col);\n            }\n          });\n        }\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-specific-tags.js":"// # disallowSpecificTags: `string` | `Array`\n//\n// Pug must not contain any of the tags specified.\n//\n// ## e.g.: `[ \"b\", \"i\" ]`\n//\n// ```pug\n// //- Invalid\n// b Bold text\n// i Italic text\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowSpecificTags',\n\n  schema: {\n    type: ['null', 'string', 'array'],\n    items: {\n      type: 'string'\n    }\n  },\n\n  configure: function (options) {\n    assert(typeof options === 'string' || Array.isArray(options), this.name + ' option requires string or array value or should be removed');\n\n    if (typeof options === 'string') {\n      options = [options];\n    }\n\n    this._disallowedTags = options.map(function (value) {\n      return value.toLowerCase();\n    });\n  },\n\n  lint: function (file, errors) {\n    var disallowedTags = this._disallowedTags;\n\n    file.iterateTokensByFilter(function (token) {\n      return token.type === 'tag' && disallowedTags.indexOf(token.val.toLowerCase()) !== -1;\n    }, function (token) {\n      errors.add('Tag \"' + token.val + '\" must not be used', token.line, token.col);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-string-concatenation.js":"// # disallowStringConcatenation: `true` | `'aggressive'`\n//\n// Pug must not contain any string concatenation.\n//\n// ```pug\n// //- Invalid\n// h1= title + 'text'\n// //- Invalid under `'aggressive'`\n// h1= title + text\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowStringConcatenation',\n\n  schema: {\n    enum: [null, true, 'aggressive']\n  },\n\n  configure: function (options) {\n    assert(options === true || options === 'aggressive',\n        this.name + ' option requires either a true value or \"aggressive\". Otherwise it should be removed');\n    this._aggressive = options === 'aggressive';\n  },\n\n  lint: function (file, errors) {\n    var _this = this;\n\n    file.iterateTokensByFilter(function (token) {\n      return (token.type === 'code' && token.buffer);\n    }, function (token) {\n      file.addErrorForConcatenation(token, errors, 'String concatenation must not be used', _this._aggressive);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-string-interpolation.js":"// # disallowStringInterpolation: `true`\n//\n// Pug must not contain any string interpolation operators.\n//\n// ```pug\n// //- Invalid\n// h1 #{title} text\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowStringInterpolation',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByType('interpolated-code', errors, 'String interpolation operators must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-tag-interpolation.js":"// # disallowTagInterpolation: `true`\n//\n// Pug must not contain any tag interpolation operators.\n//\n// ```pug\n// //- Invalid\n// | #[strong html] text\n// p #[strong html] text\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowTagInterpolation',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForAllTokensByType('start-pug-interpolation', errors, 'Tag interpolation operators must not be used');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/disallow-template-string.js":"// # disallowTemplateString: `true` | `'all'`\n//\n// Pug must not contain template strings. `true` only fails when a template\n// string is used directly; `'all'` fails when template strings are used at\n// all.\n//\n// ## e.g. `true`\n//\n// ```pug\n// //- Invalid\n// h1= `${title} text`\n//\n// //- Valid\n// h1= translate(`${title} text`)\n// ```\n//\n// ## e.g. `'all'`\n//\n// ```pug\n// //- Invalid\n// h1= translate(`${title} text`)\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'disallowTemplateString',\n\n  schema: {\n    enum: [null, true, 'all']\n  },\n\n  configure: function (options) {\n    assert(options === true || options === 'all',\n        this.name + ' option requires either a true value or \"all\". Otherwise it should be removed');\n    this._all = options === 'all';\n  },\n\n  lint: function (file, errors) {\n    file.iterateTokensByFilter(function (token) {\n      return (token.type === 'code' && token.buffer);\n    }, function (token) {\n      file.addErrorForTemplateString(token, errors, 'Template string must not be used', this._all);\n    }.bind(this));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/maximum-number-of-lines.js":"// # maximumNumberOfLines: `int`\n//\n// Pug files should be at most the number of lines specified.\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'maximumNumberOfLines',\n\n  schema: {\n    type: ['null', 'integer']\n  },\n\n  configure: function (options) {\n    assert(typeof options === 'number', this.name + ' option requires number value or should be removed');\n\n    this._maximumNumberOfLines = options;\n  },\n\n  lint: function (file, errors) {\n    var lastToken = file.getLastToken();\n\n    if (lastToken.line > this._maximumNumberOfLines) {\n      errors.add('File must be at most ' + this._maximumNumberOfLines + ' lines long', lastToken.line);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-class-literals-before-attributes.js":"// # requireClassLiteralsBeforeAttributes: `true`\n//\n// All class literals must be written before any attribute blocks.\n//\n// ```pug\n// //- Invalid\n// input(type='text').class\n//\n// //- Valid\n// input.class(type='text')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireClassLiteralsBeforeAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['disallowClassLiteralsBeforeAttributes'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('class', 'start-attributes', utils.htmlTagBoundaryTypes, errors, 'All class literals must be written before any attribute blocks');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-class-literals-before-id-literals.js":"// # requireClassLiteralsBeforeIdLiterals: `true`\n//\n// All class literals must be written before any ID literals.\n//\n// ```pug\n// //- Invalid\n// input#id.class(type='text')\n//\n// //- Valid\n// input.class#id(type='text')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireClassLiteralsBeforeIdLiterals',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['disallowClassLiteralsBeforeIdLiterals'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('class', 'id', utils.htmlTagBoundaryTypes, errors, 'All class literals must be written before any ID literals');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-id-literals-before-attributes.js":"// # requireIdLiteralsBeforeAttributes: `true`\n//\n// All ID literals must be written before any attribute blocks.\n//\n// ```pug\n// //- Invalid\n// input(type='text')#id\n//\n// //- Valid\n// input#id(type='text')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireIdLiteralsBeforeAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['disallowIdLiteralsBeforeAttributes'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectTokenTypeOrder('id', 'start-attributes', utils.htmlTagBoundaryTypes, errors, 'All ID literals must be written before any attribute blocks');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-line-feed-at-file-end.js":"// # requireLineFeedAtFileEnd: `true`\n//\n// All files must end with a line feed.\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireLineFeedAtFileEnd',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var src = file.getSource();\n    var lineBreaks = ['\\r', '\\n', '\\r\\n'];\n    var hasFinalLineFeed;\n\n    lineBreaks.forEach(function (lineBreak) {\n      var match = src.match(lineBreak + '$');\n      if (match !== null && !hasFinalLineFeed) {\n        hasFinalLineFeed = match[0] === lineBreak;\n      }\n    });\n\n    if (!hasFinalLineFeed) {\n      errors.add('Missing line feed at file end', file.getLines().length);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-lower-case-attributes.js":"// # requireLowerCaseAttributes: `true`\n//\n// All attributes must be written in lower case. Files with `doctype xml` are ignored.\n//\n// ```pug\n// //- Invalid\n// div(Class='class')\n//\n// //- Valid\n// div(class='class')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireLowerCaseAttributes',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var isXml;\n\n    file.iterateTokensByType('doctype', function (token) {\n      isXml = token.val === 'xml';\n    });\n\n    if (!isXml) {\n      file.iterateTokensByType('attribute', function (token) {\n        if (token.name !== token.name.toLowerCase()) {\n          errors.add('All attributes must be written in lower case', token.line, token.col);\n        }\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-lower-case-tags.js":"// # requireLowerCaseTags: `true`\n//\n// All tags must be written in lower case. Files with `doctype xml` are ignored.\n//\n// ```pug\n// //- Invalid\n// Div(class='class')\n//\n// //- Valid\n// div(class='class')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireLowerCaseTags',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var isXml;\n\n    file.iterateTokensByType('doctype', function (token) {\n      isXml = token.val === 'xml';\n    });\n\n    if (!isXml) {\n      file.addErrorForAllTokensByFilter(function (token) {\n        return token.type === 'tag' && token.val !== token.val.toLowerCase();\n      }, errors, 'All tags must be written in lower case');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-space-after-code-operator.js":"// # requireSpaceAfterCodeOperator: `true` | `Array`\n//\n// ## e.g.: `true`\n//\n// All code operators (`-`/`=`/`!=`) must be immediately followed by a single space.\n//\n// ```pug\n// //- Invalid\n// p='This code is <escaped>'\n// p!=  'This code is <strong>not</strong> escaped'\n//\n// //- Valid\n// p= 'This code is <escaped>'\n// p!= 'This code is <strong>not</strong> escaped'\n// ```\n//\n// ## e.g.: `[ \"-\" ]`\n//\n// All unbuffered code operators (`-`) must be immediately followed by a single space.\n//\n// ```pug\n// //- Invalid\n// -var a = 'This is code'\n//\n// //- Valid\n// - var a = 'This is code'\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireSpaceAfterCodeOperator',\n\n  schema: {\n    anyOf: [\n      {\n        enum: [null, true]\n      },\n      {\n        type: 'array',\n        items: {\n          enum: ['-', '=', '!=']\n        }\n      }\n    ]\n  },\n\n  configure: function (options) {\n    this._codeOperatorTypes = utils.validateCodeOperatorOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForCodeOperator(this._codeOperatorTypes, true, errors);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-spaces-inside-attribute-brackets.js":"// # requireSpacesInsideAttributeBrackets: `true`\n//\n// Requires space after opening attribute bracket and before closing.\n//\n// ```pug\n// //- Invalid\n// input(type='text' name='name' value='value')\n//\n// //- Valid\n// input( type='text' name='name' value='value' )\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireSpacesInsideAttributeBrackets',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  contradictions: ['disallowSpacesInsideAttributeBrackets'],\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.addErrorForIncorrectSpacesAroundType({\n      type: 'start-attributes',\n      required: true,\n      position: 'after',\n      description: 'opening bracket'\n    }, errors);\n\n    file.addErrorForIncorrectSpacesAroundType({\n      type: 'end-attributes',\n      required: true,\n      position: 'before',\n      description: 'closing bracket'\n    }, errors);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-specific-attributes.js":"// # requireSpecificAttributes: `Array`\n//\n// ## e.g.: `[ { img: [ \"alt\" ] } ]`\n//\n// `img` tags must contain all of the attributes specified.\n//\n// ```pug\n// //- Invalid\n// img(src='src')\n//\n// //- Valid\n// img(src='src' alt='alt')\n// ```\n\nvar assert = require('assert');\nvar CssParser = require('css-selector-parser').CssSelectorParser;\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireSpecificAttributes',\n\n  schema: {\n    type: ['null', 'array'],\n    items: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      }\n    }\n  },\n\n  configure: function (options) {\n    assert(Array.isArray(options), this.name + ' option requires array value or should be removed');\n\n    this._requiredAttributes = options;\n  },\n\n  lint: function (file, errors) {\n    this._requiredAttributes.forEach(function (attribute) {\n      for (var selector in attribute) {\n        /* istanbul ignore else */\n        if (attribute.hasOwnProperty(selector)) {\n          validateAttribute(attribute, selector);\n        }\n      }\n    });\n\n    function compareAttributes(attrs) {\n      return attrs === undefined;\n    }\n\n    function validateAttribute(attribute, selector) {\n      var cssParser = new CssParser();\n      var cssRule = cssParser.parse(selector).rule;\n      var tag = cssRule.tagName;\n      var attrs = cssRule.attrs;\n\n      file.iterateTokensByFilter(function (token) {\n        return token.type === 'tag' && token.val.toLowerCase() === tag.toLowerCase() && compareAttributes(attrs);\n      }, function (token) {\n        var lineNumber = token.line;\n        var columnNumber = token.col;\n        var requiredAttributes = utils.ownProperty(attribute, selector);\n        var start = file.getNextTokenByType(token, ['newline', 'start-attributes']);\n        var startIndex = (start || token)._index;\n        var end = file.getNextTokenByType(token, ['newline', 'end-attributes']);\n        var endIndex = (end || token)._index;\n        var attributeNames = [];\n        var hasAttributes;\n\n        if (typeof requiredAttributes === 'string') {\n          requiredAttributes = [requiredAttributes];\n        }\n\n        file.iterateTokensByFilter(function (token) {\n          if (token.type === 'attribute' && token._index > startIndex && token._index < endIndex) {\n            hasAttributes = true;\n            return true;\n          }\n        }, function (token) {\n          attributeNames.push(token.name.toLowerCase());\n        });\n\n        if (hasAttributes) {\n          requiredAttributes.forEach(function (attribute) {\n            if (attributeNames.indexOf(attribute.toLowerCase()) === -1) {\n              errors.add('Tag \"' + tag + '\" must have attribute \"' + attribute + '\"', lineNumber, columnNumber);\n            }\n          });\n        } else {\n          errors.add('Tag \"' + tag + '\" must have attributes \"' + requiredAttributes.join('\", \"') + '\"'\n              , lineNumber, columnNumber);\n        }\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/require-strict-equality-operators.js":"// # requireStrictEqualityOperators: `true`\n//\n// Requires the use of `===` and `!==` instead of `==` and `!=`.\n//\n// ```pug\n// //- Invalid\n// if true == false\n// if true != false\n//\n// //- Valid\n// if true === false\n// if true !== false\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'requireStrictEqualityOperators',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    file.iterateTokensByType(['if', 'else-if'], function (token) {\n      var regex = /([!=]=)(.)/;\n      var match = token.val.match(regex);\n      var line = file.getLine(token.line);\n      var valueIndex = line.indexOf(token.val);\n      var columnNumber;\n      var operator;\n\n      if (match !== null) {\n        operator = match[1];\n\n        if (match[2] !== '=') {\n          columnNumber = valueIndex + 1 + match.index;\n\n          errors.add('Expected \\'' + operator + '=\\' and instead saw \\'' + operator + '\\'', token.line, columnNumber);\n        }\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-attribute-quote-marks.js":"// # validateAttributeQuoteMarks: `\"\\\"\"` | `\"'\"` | `true`\n//\n// ## e.g.: `\"'\"`\n//\n// All attribute values must be enclosed in single quotes.\n//\n// ```pug\n// //- Invalid\n// input(type=\"text\" name=\"name\" value=\"value\")\n//\n// //- Valid\n// input(type='text' name='name' value='value')\n// ```\n//\n// ## if (true)\n//\n// All attribute values must be enclosed in quote marks match the first quote mark encountered in the source code.\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateAttributeQuoteMarks',\n\n  schema: {\n    enum: [null, '\"', '\\'', true]\n  },\n\n  configure: function (options) {\n    assert(options === '\"' || options === '\\'' || options === true, this.name + ' option requires \\'\"\\', \"\\'\", or a true value');\n\n    this._quoteMark = options;\n  },\n\n  lint: function (file, errors) {\n    var quoteMark = this._quoteMark;\n    var isQuoteMarkFound;\n\n    file.iterateTokensByType('attribute', function (token) {\n      var value = token.val.length ? token.val : '';\n      var quotes = ['\"', '\\''];\n      var openingQuote = value.charAt(0);\n      var closingQuote = value.charAt(value.length - 1);\n\n      if (quoteMark === true && !isQuoteMarkFound) {\n        quoteMark = openingQuote;\n        isQuoteMarkFound = true;\n      }\n\n      if (quotes.indexOf(openingQuote) !== -1 && quotes.indexOf(closingQuote) !== -1) {\n        if (openingQuote !== quoteMark || closingQuote !== quoteMark) {\n          errors.add('Invalid attribute quote mark found', token.line, token.col);\n        }\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-attribute-separator.js":"// # validateAttributeSeparator: `string` | `object`\n//\n// ## e.g.: `\", \"`\n//\n// * All attributes must be immediately followed by a comma and then a space.\n// * All attributes must be on the same line.\n//\n// ```pug\n// //- Invalid\n// input(type='text' name='name' value='value')\n// div\n//   input(type='text'\n//   , name='name'\n//   , value='value'\n//   )\n//\n// //- Valid\n// input(type='text', name='name', value='value')\n// ```\n//\n// ## e.g.: `{ \"separator\": \" \", \"multiLineSeparator\": \"\\n  \" }`\n//\n// * All attributes that are on the same line must be immediately followed by a space.\n// * All attributes that are on different lines must be preceded by two spaces.\n//\n// ```pug\n// //- Invalid\n// input(type='text', name='name', value='value')\n// div\n//   input(type='text'\n//   , name='name'\n//   , value='value'\n//   )\n//\n// //- Valid\n// input(type='text' name='name' value='value')\n// div\n//   input(type='text'\n//     name='name'\n//     value='value'\n// )\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateAttributeSeparator',\n\n  schema: {\n    type: ['null', 'string', 'object'],\n    properties: {\n      separator: {type: 'string'},\n      multiLineSeparator: {type: 'string'}\n    }\n  },\n\n  configure: function (options) {\n    assert(typeof options === 'string' || typeof options === 'object', this.name + ' option requires string or object value or should be removed');\n\n    if (typeof options === 'string') {\n      options = {\n        separator: options,\n        multiLineSeparator: options\n      };\n    }\n\n    assert(typeof options.separator === 'string' && /^([ ,]+)$/.test(options.separator), this.name + ' option.separator requires string value containing only commas or spaces');\n\n    assert(typeof options.multiLineSeparator === 'string' && /^([ ,\\t\\r\\n]+)$/.test(options.multiLineSeparator), this.name + ' option.multiLineSeparator requires string value containing only commas, spaces or tabs');\n\n    this._separator = options.separator;\n    this._multiLineSeparator = options.multiLineSeparator;\n  },\n\n  lint: function (file, errors) {\n    var separator = this._separator;\n    var multiLineSeparator = this._multiLineSeparator;\n\n    file.iterateTokensByType('start-attributes', function (token) {\n      var start = token;\n      var startIndex = start._index;\n      var end = file.getNextTokenByType(start, 'end-attributes');\n      var endIndex = end._index;\n      var patterns = [];\n      var regexFind = new RegExp(/[^()#]+/g);\n      var match;\n      var parsedSource;\n      var parsedSeparator;\n      var current;\n      var currentLine;\n      var currentSeparator;\n\n      if (endIndex > startIndex + 2) {\n        file.iterateTokensByFilter(function (token) {\n          return token.type === 'attribute' && token._index > startIndex && token._index < endIndex;\n        }, function (token) {\n          var value = typeof token.val === 'boolean' ? '' : token.val;\n\n          patterns.push(getEscapedPattern(token.name) + (value.length > 0 ? '\\\\s*\\\\!*=\\\\s*' : '') +\n              getEscapedPattern(value));\n\n          if (current === undefined) {\n            current = token;\n          }\n        });\n\n        currentLine = current.line;\n        parsedSource = getParsedSource(current, start, end, patterns);\n\n        while ((match = regexFind.exec(parsedSource)) !== null) {\n          parsedSeparator = match[0];\n          current = file.getNextTokenByType(current, ['attribute', 'end-attributes']);\n          currentSeparator = separator;\n\n          if (current.line > currentLine) {\n            currentSeparator = multiLineSeparator;\n            currentLine = current.line;\n          }\n\n          if (parsedSeparator !== currentSeparator) {\n            errors.add('Invalid attribute separator found', currentLine\n                , Math.max(current.col - parsedSeparator.length, 1));\n          }\n        }\n      }\n    });\n\n    function getParsedSource(current, start, end, patterns) {\n      var source = file.getSourceBetweenTokens(current, end).trim();\n      var regexReplace = new RegExp(patterns.join('|'), 'g');\n      var regexNewLines = new RegExp('(\\\\r\\\\n|\\\\r|\\\\n)[ \\\\t]{' + current._indent + '}', 'g');\n\n      source = source.replace(regexReplace, function (val) {\n        return Array(val.length + 1).join('#');\n      });\n\n      if (start.line !== end.line) {\n          // Remove new line characters and use multi-line separator\n        source = source.replace(regexNewLines, '\\n');\n      }\n\n      return source;\n    }\n\n    function getEscapedPattern(literal) {\n      return literal.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-div-tags.js":"// # validateDivTags: `true`\n//\n// Checks that Pug does not contain any unnecessary `div` tags.\n//\n// ```pug\n// //- Invalid\n// div.class\n// div#id\n// div.class(class='class')\n//\n// //- Valid\n// .class\n// #id\n// .class(class='class')\n// ```\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateDivTags',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var isXml;\n\n    file.iterateTokensByType('doctype', function (token) {\n      isXml = token.val === 'xml';\n    });\n\n    if (!isXml) {\n      file.iterateTokensByFilter(function (token) {\n        return token.type === 'tag' && token.val === 'div';\n      }, function (token) {\n        var current = token;\n        var currentLineTokens = file.getTokensByFilter(function (token) {\n          return token.line === current.line;\n        });\n        var boundaryStart = file.getPreviousTokenByType(current, utils.htmlTagBoundaryTypes) || currentLineTokens[0];\n        var boundaryStartIndex = boundaryStart._index;\n        var boundaryEnd = file.getNextTokenByType(current, utils.htmlTagBoundaryTypes);\n        var boundaryEndIndex = boundaryEnd._index;\n\n        file.iterateTokensByFilter(function (token) {\n          return ['class', 'id'].indexOf(token.type) !== -1 &&\n            token._index >= boundaryStartIndex &&\n            token._index <= boundaryEndIndex;\n        }, function () {\n          errors.add('Unnecessary `div` tag', current.line, current.col);\n        });\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-extensions.js":"// # validateExtensions: `true`\n//\n// Pug template must use proper file extensions with inclusion and inheritance\n// (`.pug`).\n//\n// ```pug\n// //- Invalid\n// include a\n// include a.jade\n// extends a\n// extends a.txt\n// extends a.jade\n//\n// //- Valid\n// include a.txt\n// include a.pug\n// extends a.pug\n// ```\n\nvar path = require('path');\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateExtensions',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var tokens = file.getTokensByFilter(function (token) {\n      return token.type === 'include' || token.type === 'extends' || token.type === 'path';\n    });\n\n    tokens.forEach(function (token, i) {\n      var next = tokens[i + 1];\n\n      if (!next || next.type !== 'path') {\n        return;\n      }\n\n      if (token.type === 'include') {\n        if (path.basename(next.val).indexOf('.') === -1) {\n          errors.add('Included file path must have a file extension', next.line, next.col);\n        } else if (path.extname(next.val) === '.jade') {\n          errors.add('Included Pug file must end in .pug', next.line, next.col);\n        }\n      } else /* istanbul ignore else */ if (token.type === 'extends') {\n        if (path.extname(next.val) !== '.pug') {\n          errors.add('Extended Pug file must end in .pug', next.line, next.col);\n        }\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-indentation.js":"// # validateIndentation: `int` | `\"\\t\"`\n//\n// ## e.g.: `2`\n//\n// Indentation must be consistently two spaces.\n//\n// ```pug\n// //- Invalid\n// div\n// <TAB>div\n//\n// //- Valid\n// div\n// <SPACE><SPACE>div\n// ```\n//\n// ## e.g.: `\"\\t\"`\n//\n// Indentation must be consistently tabs.\n//\n// ```pug\n// //- Invalid\n// div\n// <SPACE><SPACE>div\n//\n// //- Valid\n// div\n// <TAB>div\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateIndentation',\n\n  schema: {\n    anyOf: [\n      {\n        enum: [null, '\\t']\n      },\n      {\n        type: 'integer'\n      }\n    ]\n  },\n\n  configure: function (options) {\n    assert((typeof options === 'number' && options > 0) || options === '\\t'\n        , this.name + ' option requires a positive number of spaces or \"\\\\t\"');\n\n    if (typeof options === 'number') {\n      this._indentSize = options;\n    } else {\n      this._indentSize = 1;\n    }\n  },\n\n  lint: function (file, errors) {\n    var indentSize = this._indentSize;\n    var currentIndent = 0;\n\n    file.iterateTokensByType(['indent', 'outdent'], function (token) {\n      if (token.val) {\n        currentIndent += indentSize;\n      } else {\n        currentIndent -= indentSize;\n      }\n\n      if (token.val && token.val !== currentIndent) {\n        errors.add('Invalid indentation', token.line, token.col);\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-line-breaks.js":"// # validateLineBreaks: `\"CR\"` | `\"LF\"` | `\"CRLF\"`\n//\n// ## e.g.: `\"LF\"`\n//\n// All line break characters must match.\n//\n// ```pug\n// //- Invalid\n// div(class='class')<CRLF>\n// .button\n//\n// //- Valid\n// div(class='class')<LF>\n// .button\n// ```\n\nvar assert = require('assert');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateLineBreaks',\n\n  schema: {\n    enum: [null, 'CR', 'LF', 'CRLF']\n  },\n\n  configure: function (options) {\n    assert(options === 'CR' || options === 'LF' || options === 'CRLF'\n        , this.name + ' option requires \"CR\", \"LF\", or \"CRLF\"');\n\n    var lineBreaks = {\n      CR: '\\r',\n      LF: '\\n',\n      CRLF: '\\r\\n'\n    };\n\n    this._lineBreak = lineBreaks[options];\n  },\n\n  lint: function (file, errors) {\n    var lines = file.getLines();\n\n    if (lines.length < 2) {\n      return;\n    }\n\n    file.getLineBreaks().some(function (lineBreak, i) {\n      if (lineBreak !== this._lineBreak) {\n        errors.add('Invalid line break', i + 1, lines[i].length);\n      }\n      return lineBreak;\n    }, this);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-self-closing-tags.js":"// # validateSelfClosingTags: `true`\n//\n// Checks that Pug does not contain any\n// [unnecessary self closing tags](http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements).\n// Files with `doctype xml` are ignored.\n//\n// ```pug\n// //- Invalid\n// area/\n// link/\n//\n// //- Valid\n// area\n// link\n// foo/\n//\n// doctype xml\n// area/\n// ```\n\nvar selfClosing = require('void-elements');\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateSelfClosingTags',\n\n  schema: {\n    enum: [null, true]\n  },\n\n  configure: function (options) {\n    utils.validateTrueOptions(this.name, options);\n  },\n\n  lint: function (file, errors) {\n    var isXml;\n\n    file.iterateTokensByType('doctype', function (token) {\n      isXml = token.val === 'xml';\n    });\n\n    if (!isXml) {\n      file.iterateTokensByType('tag', function (token) {\n        var nextToken = file.getToken(token._index + 1);\n\n        if (nextToken.type === 'slash' && selfClosing[token.val]) {\n          errors.add('Unnecessary self closing tag', nextToken.line, nextToken.col);\n        }\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-pug-lint/node_modules/pug-lint/lib/rules/validate-template-string.js":"// # validateTemplateString: `true` | Array\n//\n// Validate the use of template string in Pug templates.\n//\n// The option can either be an array or `true`. If it is an array, it can\n// contain the following strings. If it is `true` signifies all of the\n// following subrules are enabled.\n//\n// ## `'variable'`\n//\n// ```pug\n// //- Invalid\n// h1= `${title}`\n//\n// //- Valid\n// h1= title\n// ```\n//\n// ## `'string'`\n//\n// ```pug\n// //- Invalid\n// h1= `title`\n//\n// //- Valid\n// h1= 'title'\n// ```\n//\n// ## `'concatenation'`\n//\n// ```pug\n// //- Invalid\n// h1= `title` + `text`\n// h1= `title` + variable\n//\n// //- Valid\n// h1= `titletext`\n// h1= `title${variable}`\n// ```\n\nvar assert = require('assert');\n\nvar acornWalk = require('acorn/dist/walk');\n\nvar utils = require('../utils');\n\nmodule.exports = function () {};\n\nmodule.exports.prototype = {\n  name: 'validateTemplateString',\n\n  schema: {\n    anyOf: [\n      {\n        enum: [null, true]\n      },\n      {\n        type: 'array',\n        items: {\n          enum: ['variable', 'string', 'concatenation']\n        }\n      }\n    ]\n  },\n\n  configure: function (options) {\n    assert(options === true || Array.isArray(options), this.name + ' option requires a true or array value or should be removed');\n\n    if (options === true) {\n      this._subrules = {\n        variable: true,\n        string: true,\n        concatenation: true\n      };\n    } else {\n      this._subrules = options.reduce(function (prev, cur) {\n        prev[cur] = true;\n        return prev;\n      }, {});\n    }\n  },\n\n  lint: function (file, errors) {\n    var _this = this;\n\n    file.iterateTokensByFilter(function (token) {\n      return token.type === 'code' && token.buffer ||\n        token.type === 'interpolated-code' ||\n        token.type === 'attribute' && typeof token.val === 'string';\n    }, function (token) {\n      if (_this._subrules.string || _this._subrules.variable) {\n        file.addErrorWithAcorn(token, function (ast) {\n          var out = [];\n\n          acornWalk.ancestor(ast, {\n            TemplateLiteral: function (node, ancestors) {\n              if (ancestors.length > 1 && ancestors[ancestors.length - 2].type === 'TaggedTemplateExpression') {\n                return;\n              }\n\n              var canBeString = _this._subrules.string &&\n                !node.expressions.length;\n              var canBeVariable = _this._subrules.variable &&\n                node.quasis.length === 2 &&\n                node.quasis[0].value.raw === '' &&\n                node.quasis[1].value.raw === '';\n\n              if (canBeString || canBeVariable) {\n                out.push(node);\n              }\n            }\n          });\n\n          return out;\n        }, errors, 'Template string is unnecessary');\n      }\n\n      if (_this._subrules.concatenation) {\n        file.addErrorWithAcorn(token, function (ast, tokens) {\n          var out = [];\n\n          acornWalk.simple(ast, {\n            BinaryExpression: function (node) {\n              if (node.operator === '+' && (isTmpl(node.left) || isTmpl(node.right))) {\n                out.push(utils.getNextAcornToken(tokens, node.left.end));\n              }\n\n              function isTmpl(node) {\n                return node.type === 'TemplateLiteral';\n              }\n            }\n          });\n\n          return out;\n        }, errors, 'Unneeded template string concatenation');\n      }\n    });\n  }\n};\n"}